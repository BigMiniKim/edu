1. set classpath 에 대하여 설명하시오.
클래스를 검색하라는 것
set classpath=. 은 . 즉 현재 폴더 에서 클래스를 검색하라는것
;을 통해 여러 주소를 넣어 줄 수 있는데 폴더주소를 넣어주면 그곳에서 찾는다

2.절대 경로와, 상대경로란?
절대 경로는 최상위 디렉토리부터 다 표현하는것
상대경로는 현재 위치를 기준으로 표현하는것. 사용자 환경이 다르므로 상대경로를 주로 사용할 것. 

3.  cd  . 관 cd .. 의 차이는?
cd. ; 현재 경로로 이동
cd.. ; 상위 경로로 이동

4.package 에 대하여 설명해 보시오.
클래스들을 모아놓은 하나의 디렉토리.

5.정보은닉에 대하여 설명하여 보시오.
접근제한자 private를 통해 함부로 클래스의 데이터를 수정, 접근하지 않게 하는 기능을 말한다.

6.접근제한자에 대하여 설명하시오.
public: 다른 패키지에서도 접근 가능
default:  같은 패키지 다른 클래스 접근가능
private:  같은 클래스 접근가능

7. 지역변수에 접근 제한자가 필요없는 이유는?
지역변수는 그 곳에서만 사용되고 사라진다.


8. 아래의 클래스를 구현하시오. 

Money money = new Money(-126000);
money.show();

출력 
잘못된 입력입니다.
오만원 0장....
오만원 0장....
등등등....
class Money {

	private int money;

	Money(int money) {
		
		setMoney(money);
	}

	public void setMoney(int money) {
		if (money < 0) {
			this.money = 0;
			System.out.println("잘못된 입력입니다.");
			return;
		}

		this.money = money;
	}

	public void show()

	{

		System.out.println("오만원 : " + money / 50000 + "장");
		money = money % 50000;

		System.out.println("만원 : " + money / 10000 + "장");
		money = money % 10000;

		System.out.println("오천원 : " + money / 5000 + "장");
		money = money % 5000;

		System.out.println("천원 : " + money / 1000 + "장");
		money = money % 1000;

		System.out.println("오백원 : " + money / 500 + "개");
		money = money % 500;

		System.out.println("백원 : " + money / 100 + "개");

	}
}


9.아래의 클래스를 구현하시오.
Employee employee = new Employee("홍길동", 19, "서울 뉴욕시", "개발 1팀");
employee.printInfo();
}

출력:
이름 : 홍길동
나이 : 19
주소 : 서울 뉴욕시
부서 : 개발 1팀


class Employee {

	private String name;
	private int age;
	private String address;
	private String department;

	Employee(String name, int age, String address, String department) {
		setName(name);
		setAge(age);
		setAddress(address);
		setDepartment(department);
	}

	public void setName(String name) {
		this.name = name;
	}
	
	public void setAge(int age) {
		this.age = age;
	}
	
	public void setAddress(String address) {
		this.address = address;
	}
	public void setDepartment(String department) {
		this.department = department;
	}
	
	
	public void printInfo() {
	
	System.out.println("이름 : " + name);
	System.out.println("나이 : " + age);
	System.out.println("주소 : " + address);
	System.out.println("부서 : " + department);
	}

}
public class Employee {

	private String name;
	private int age;
	private String addr;
	private String dept;

	public Employee(String name, int age, String addr, String dept) {
		this.name = name;
		this.age = age;
		this.addr = addr;
		this.dept = dept;

	}

	public void printInfo() {
		System.out.println("이름: " + name);
		System.out.println("나이: " + age);
		System.out.println("주소: " + addr);
		System.out.println("부서: " + dept);
	}

}


10.다음 멤버를 가지고 직사각형을 표현하는 Rectangle 클래스를 작성하라.
​
- int 타입의 x, y, width, height 필드 : 사각형을 구성하는 점과 크기 정보
- x, y, width, height 값을 매개변수로 받아 필드를 초기화하는 생성자
- int square() : 사각형 넓이 리턴
- void show() : 사각형의 좌표와 넓이를 화면에 출력
- boolean contains(Rectangle r) : 매개변수로 받은 r이 현 사각형 안에 있으면 true 리턴 (겹치면 안됨. 완전히 안에 있어야 true)
- main() 메소드의 코드와 실행 결과는 다음과 같다.


public static void main(String args[]) {
		Rectangle r = new Rectangle(2, 2, 8, 7);
		Rectangle s = new Rectangle(5, 5, 6, 6);
		Rectangle t  = new Rectangle(1, 1, 10, 10);
		
		r.show();
		System.out.println("의 면적은 "+s.square());
		if(t.contains(r)) System.out.println("t는 r을 포함합니다.");
		if(t.contains(s)) System.out.println("t는 s를 포함합니다.");
	}

출력:
(2,2)에서 크기가 8x7인 사각형
s의 면적은 36
t는 r을 포함합니다.

public class Rectangle {
	private int x, y, width, height;

	public Rectangle(int x, int y, int width, int height) {
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;

	}

	public void show() {

		System.out.println("(" + x + "," + y + ")에서 크기가 " + width + "x" + height + "인 사각형");
	}

	public int square() {
		return width * height;

	}

	public boolean contains(Rectangle r) {
		boolean bool = false;

		if ((this.x < r.x) && (this.y < r.y) && (this.x + this.width) > (r.x + r.width)
				&& (this.y + this.height) > (r.y + r.height)) {
			bool = true;

		}

		/*
		 * if((this.x <r.x) && (this.x+ this.width) > (r.x + r.width)) && (this.y <r.y)
		 * && (this.y+ this.height) > (r.y + r.height)) ) { bool = true; }
		 */

		return bool;

	}

}

